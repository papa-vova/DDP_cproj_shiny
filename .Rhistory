plot(data.frame(x,y))
lm(y~x)
plot(lm(y~x)$fit)
install.packages("caret")
library(caret)
library(kernlab)
install.packages("kernlab")
library(kernlab)
data(spam)
summary(spam)
inTrain <- createDataPartition(y = spam$type, p = 0.75, list = FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
hist(training$capitalAve, main="", xlab="ave. capital run length")
mean(training$capitalAve)
sd(training$capitalAve)
preObj <- preProcess(training[,-58], method = c("center", "scale"))
summary(preObj)
head(training[,58])
names(training[,58])
names(training)
predict(preObj, training[,-58])
head(predict(preObj, training[,-58]))
names(predict(preObj, training[,-58]))
names(training)
trainCapAveS <- predict(preObj, training[,-58])$capitalAve
mean(trainCapAveS)
sd(trainCapAveS)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
class(testIndex)
trainIndex = createDataPartition(diagnosis, p = 0.50)
class(testIndex)
training = adData[trainIndex,]
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[trainIndex,]
trainIndex = createDataPartition(diagnosis, p = 0.50)
trainIndex
trainIndex = createDataPartition(diagnosis, p = 0.50, list = FALSE)
trainIndex
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
inTrain
hist(training$Superplasticizer)
hist(log(training$Superplasticizer+1))
hist(training$Superplasticizer)
hist(log(training$Superplasticizer+1))
hist(training$Superplasticizer)
?hist
hist(training$Superplasticizer, labels = TRUE)
hist(log(training$Superplasticizer+1), labels = TRUE)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training
head(training)
training[, grep('IL', names(training))]
head(training[, grep('IL', names(training))])
head(training[, grep('^IL', names(training))])
ILvars <- training[, grep('^IL', names(training))]
preProc <- preProcess(ILvars, method="pca", pcaComp=2)
?preProcess
preProc <- preProcess(ILvars, method="pca")
preProc
summary(preProc)
preProc <- preProcess(ILvars, method="pca", pcaComp=9)
preProc
preProc <- preProcess(ILvars, method="pca")
preProc$numComp
preProc <- preProcess(ILvars, method="pca", thresh=0.8)
preProc
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(training)
dILvars <- training[, c("diagnosis", c(grep('^IL', names(training)))]
dILvars <- training[, c("diagnosis", grep('^IL', names(training)))]
c("diagnosis", grep("^IL", names(training)))
?grep
c("diagnosis", grep("^IL", names(training), value=TRUE))
dILvars <- training[, c("diagnosis", grep("^IL", names(training), value=TRUE))]
head(dILvars)
preProc80 <- preProcess(dILvars, method="pca", thresh=0.8)
trainPC80 <- predict(preProc80, dILvars)
modelFit80 <- train(training$diagnosis ~ ., method = "glm", data = trainPC80)
modelFit80 <- train(training$diagnosis ~ ., method = "glm", data = trainPC80)
library(caret)
modelFit80 <- train(training$diagnosis ~ ., method = "glm", data = trainPC80)
install.packages("e1071")
modelFit80 <- train(training$diagnosis ~ ., method = "glm", data = trainPC80)
testPC80 <- predict(preProc80, testing[, c("diagnosis", grep("^IL", names(testing), value=TRUE))])
confusionMatrix(testing$diagnosis, predict(modelFit80, testing))
confusionMatrix(testing$diagnosis, predict(modelFit80, testPC80))
modelFitNew <- train(training$diagnosis ~ ., method = "glm", preProcess = "pca", data = dILvars, thresh = 0.8)
?train
modelFitNew <- train(training$diagnosis ~ ., data = dILvars, method = "glm", preProcess = "pca",  thresh = 0.8)
modelFitNew <- train(training$diagnosis ~ ., method = "glm", preProcess = "pca", data = training, thresh = 0.8)
install.packages(c("MASS", "mgcv", "packrat", "plotly", "Rcpp", "roxygen2"))
install.packages("AppliedPredictiveModeling")
install.packages("ElemStatLearn")
install.packages("pgmm")
install.packages("rpart")
library(pgmm)
data(olive)
olive = olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
newdata
olive
head(olive)
newdata
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
inTrain <- createDataPartition(y=segmentationOriginal$Case,p=0.75, list=FALSE)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
View(segmentationOriginal)
View(segmentationOriginal)
modFit <- train(Case ~ .,method="rpart",data=training)
set.seed(125)
modFit <- train(Case ~ .,method="rpart",data=training)
modFit
modFit$finalModel
print(modFit$finalModel)
library(rattle)
install.packages("rattle")
library(rattle)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
inTrain <- createDataPartition(y=segmentationOriginal$Case,p=0.75, list=FALSE)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
set.seed(125)
modFit <- train(Case ~ .,method="rpart",data=training)
plot(modFit$finalModel, uniform=TRUE)
rattle::fancyRpartPlot(modFit$finalModel)
install.packages("rpart.plot")
rattle::fancyRpartPlot(modFit$finalModel)
predict(modFit,newdata=testing)
segmentationOriginal$Case
confusionMatrix(predict(modFit,newdata=testing), testing)
confusionMatrix(predict(modFit,newdata=testing), testing$Case)
str(training)
training <- segmentationOriginal[Case == "Train",]
?createDataPartition
training <- segmentationOriginal[segmentationOriginalCase == "Train",]
training <- segmentationOriginal[segmentationOriginal$Case == "Train",]
testing <- segmentationOriginal[segmentationOriginal$Case == "Test",]
dim(training)
dim(testing)
head(training)
head(training$Case)
training <- segmentationOriginal[,segmentationOriginal$Case == "Train"]
training <- segmentationOriginal[segmentationOriginal$Case == "Train"]
training <- segmentationOriginal[segmentationOriginal$Case == "Train",]
segmentationOriginal[segmentationOriginal$Case == "Train",]
segmentationOriginal[segmentationOriginal$Case == "Train",]$Case
training <- segmentationOriginal[segmentationOriginal$Case == "Train",]
ls()
testing <- segmentationOriginal[segmentationOriginal$Case == "Test",]
testing$Case
training$Case
dim(training)
dim(testing)
dim(segmentationOriginal)
set.seed(125)
modFit <- train(Case ~ .,method="rpart",data=training)
testing <- segmentationOriginal[segmentationOriginal$Case == "Test", -Case]
testing <- segmentationOriginal[segmentationOriginal$Case == "Test", -segmentationOriginal$Case]
modFit <- train(Case ~ .,method="rpart",data=training[-Case])
modFit <- train(Case ~ .,method="rpart",data=training[-Case,])
modFit <- train(Case ~ .,method="rpart",data=training[-training$Case,])
training[-training$Case]
training[-training$Case,]
training[,-training$Case]
training[-c("case")]
training[-c("Case")]
training[-c("Case"),]
training[c("Case")]
training[grep("!^Case$", names(training))]
training[grep("!^Case$", names(training)),]
training[grep("^Case", names(training)),]
grep("^Case", names(training))
grep("^Case", names(training))[1]
grep("^Case", names(training))[1][]1
grep("^Case", names(training))[1][1]
grep("^Case", names(training))[1,1]
grep("^Case", colnames(training))
modFit <- train(Case ~ .,method="rpart",data=training)
str(training)
modFit <- train(Case ~ .,method="rpart",data=training)
modFit <- train(Class ~ .,method="rpart",data=training)
set.seed(125)
modFit <- train(Class ~ .,method="rpart",data=training)
names(training)
training$TotalIntench2
training$TotalIntenCh2
data.frame(TotalIntench2 = 23,000; FiberWidthCh1 = 10; PerimStatusCh1=2)
data.frame(TotalIntench2 = 23.000, FiberWidthCh1 = 10, PerimStatusCh1=2)
predict(modFit, data.frame(TotalIntench2 = 23.000, FiberWidthCh1 = 10, PerimStatusCh1=2))
predict(modFit$finalModel, data.frame(TotalIntench2 = 23.000, FiberWidthCh1 = 10, PerimStatusCh1=2))
predict(modFit, data.frame(TotalIntenCh2 = 23.000, FiberWidthCh1 = 10, PerimStatusCh1=2))
testing[1:4,]
newData <- testing[1:4,]
newData
newData <- 0
newData
newData <- testing[1:4,]
newData[1,1] = 0
newData
newData[,] = 0
newData
newData[2,]
newData[3,]
newData[4,]
newData[5,]
newData
newData[1,newData$TotalIntenCh2] = 23000
newData[1,newData$FiberWidthCh1] = 10
newData[1,newData$PerimStatusCh1]=2
newData[1,"TotalIntenCh2"] = 23000
newData[1,"FiberWidthCh1"] = 10
newData[1,"PerimStatusCh1"]=2
newData[2,"newData$TotalIntenCh2"] = 50000
newData[2,"newData$FiberWidthCh1"] = 10
newData[3,"newData$VarIntenCh4"] = 100
newData[2,"newData$TotalIntenCh2"] = 50000
newData[2,"newData$FiberWidthCh1"] = 10
newData[2,"newData$VarIntenCh4"] = 100
newData[3,"newData$VarIntenCh4"] = 0
newData[3,"newData$TotalIntenCh2"] = 57000
newData[3,"newData$FiberWidthCh1"] = 8
newData[3,"newData$VarIntenCh4"] = 100
newData[,] = 0
newData[1,"TotalIntenCh2"] = 23000
newData[1,"FiberWidthCh1"] = 10
newData[1,"PerimStatusCh1"]=2
newData[2,"TotalIntenCh2"] = 50000
newData[2,"FiberWidthCh1"] = 10
newData[2,"VarIntenCh4"] = 100
newData[3,"TotalIntenCh2"] = 57000
newData[3,"FiberWidthCh1"] = 8
newData[3,"VarIntenCh4"] = 100
newData[4,"FiberWidthCh1"] = 8
newData[4,"VarIntenCh4"] = 100
newData[4,"PerimStatusCh1"]=2
predict(modFit, newData)
newData <- testing[1:4,]
class(newData)
lapply(names(newData), class)
newData <- testing[1:4,]
lapply(newData, class)
newData <- testing[1:4,]
newData[,] = 0
newData[1,"TotalIntenCh2"] = 23000
newData[1,"FiberWidthCh1"] = 10
newData[1,"PerimStatusCh1"]=2
newData[2,"TotalIntenCh2"] = 50000
newData[2,"FiberWidthCh1"] = 10
newData[2,"VarIntenCh4"] = 100
newData[3,"TotalIntenCh2"] = 57000
newData[3,"FiberWidthCh1"] = 8
newData[3,"VarIntenCh4"] = 100
newData[4,"FiberWidthCh1"] = 8
newData[4,"VarIntenCh4"] = 100
newData[4,"PerimStatusCh1"]=2
predict(modFit, newData)
newData <- testing[1:4,]
newData[,] = 0
newData$Case <- factor(newData$Case)
newData$Class <- factor(newData$Class)
newData[1,"TotalIntenCh2"] = 23000
newData[1,"FiberWidthCh1"] = 10
newData[1,"PerimStatusCh1"]=2
newData[2,"TotalIntenCh2"] = 50000
newData[2,"FiberWidthCh1"] = 10
newData[2,"VarIntenCh4"] = 100
newData[3,"TotalIntenCh2"] = 57000
newData[3,"FiberWidthCh1"] = 8
newData[3,"VarIntenCh4"] = 100
newData[4,"FiberWidthCh1"] = 8
newData[4,"VarIntenCh4"] = 100
newData[4,"PerimStatusCh1"]=2
predict(modFit, newData)
newData <- testing[1:4,]
length(newData)
newData[,4:length(newData)] <- 0
newData[1,"TotalIntenCh2"] = 23000
newData[1,"FiberWidthCh1"] = 10
newData[1,"PerimStatusCh1"]=2
newData[2,"TotalIntenCh2"] = 50000
newData[2,"FiberWidthCh1"] = 10
newData[2,"VarIntenCh4"] = 100
newData[3,"TotalIntenCh2"] = 57000
newData[3,"FiberWidthCh1"] = 8
newData[3,"VarIntenCh4"] = 100
newData[4,"FiberWidthCh1"] = 8
newData[4,"VarIntenCh4"] = 100
newData[4,"PerimStatusCh1"]=2
predict(modFit, newData)
predict(modFit, newData[1,])
predict(modFit, newData[2,])
predict(modFit, newData[3,])
predict(modFit, newData[4,])
newData[1,"TotalIntenCh2"] = 23000
newData[1,"FiberWidthCh1"] = 10
newData[1,"PerimStatusCh1"]=2
newData[2,"TotalIntenCh2"] = 50000
newData[2,"FiberWidthCh1"] = 10
newData[2,"VarIntenCh4"] = 100
newData[3,"TotalIntenCh2"] = 57000
newData[3,"FiberWidthCh1"] = 8
newData[3,"VarIntenCh4"] = 100
newData[4,"FiberWidthCh1"] = 8
newData[4,"VarIntenCh4"] = 100
newData[4,"PerimStatusCh1"]=200
predict(modFit, newData[4,])
install.packages("curl")
library(pgmm)
data(olive)
olive = olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
olive
head(olive)
head(newdata)
modFit <- train(Area ~ .,method="rpart",data=olive)
library(caret)
modFit <- train(Area ~ .,method="rpart",data=olive)
predict(modFit, newdata)
library(rattle)
fancyRpartPlot(modFit$finalModel)
View(newdata)
View(newdata)
head(olive)
hist(olive)
hist(olive$Area)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
?train
View(SAheart)
modSA <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,method="glm", family = "binomial", data = trainSA)
predTrain <- predict(modSA, train)
predTrain <- predict(modSA, trainSA)
predTest <- predict(modSA, testSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
misclass(testSA, predSA)
missClass(testSA, predSA)
missClass(testSA, predTest)
missClass(trainSA, predTrain)
sum(((prediction > 0.5)*1)
;
missClass(sum((testSA > 0.5)*1), predTest)
modSA <- train(as.factor(chd) ~ age + alcohol + obesity + tobacco + typea + ldl,method="glm", family = "binomial", data = trainSA)
predTrain <- predict(modSA, train)
predTrain <- predict(modSA, trainSA)
predTest <- predict(modSA, testSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(sum((testSA > 0.5)*1), predTest)
missClass(testSA, predTest)
missClass(testSA > 0.5, predTest)
missClass((testSA > 0.5)*1, predTest)
missClass(testSA$chd, predTest)
missClass(as.factor(testSA$chd), predTest)
testMatrix <- confusionMatrix(predTest, testSA$chd)
trainMatrix <- confusionMatrix(predTrain, trainSA$chd)
print("Accuracy")
print(c(testMatrix$overall[1],trainMatrix$overall[1]))
print("Misclassification ")
print(1 - c(testMatrix$overall[1], trainMatrix$overall[1]))
missClass(testSA$chd, as.integer(predTest))
missClass(trainSA$chd, as.integer(predTrain))
missClass(trainSA$chd, as.integer(predTrain)-1)
missClass(testSA$chd, as.integer(predTest)-1)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
ls()
vowel.train
head(vowel.train)
vowel.train <- as.factor(vowel.train$y)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
modFit <- train(y ~ ., method = "rpart", data = vowel.train)
?varImp
varImp(modFit)
varImp(modFit, scale = FALSE)
set.seed(33833)
modFit <- train(y ~ ., method = "rpart", data = vowel.train)
varImp(modFit)
varImp(vowel.train)
varImp(modFit, useModel = T)
varImp(modFit, useModel = F)
varImp(modFit, useModel = F, nonrapa = T)
varImp(modFit, useModel = F, nonrapa = F)
install.packages(c("caret", "curl", "jsonlite", "Matrix", "plotly", "rattle"))
install.packages("shiny")
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
install.packages('rCharts')
library('rCharts')
?dTable
installed.packages('devtools')
install.packages('devtools')
library(devtools)
install.packages('devtools')
library(shiny)
install_github('rCharts', 'ramnathv')
library(devtools)
install.packages('RTools')
install_github('rCharts', 'ramnathv')
?dTable
library(rCharts)
?dTable
dTable
data("airquality")
dTable(airquality, sPaginationType = "full_numbers")
library(shiny)
?sliderInput
library(AppliedPredictiveModeling)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(training)
?grep
grep("^IL", names(training))
training[grep("^IL", names(training))]
head(training[grep("^IL", names(training))])
ill <- training[grep("^IL", names(training))]
preProcess(ill, method="pca")
?preProcess
preProcess(ill, method="pca", thresh = 0.8)
preProcess(ill, method="pca", thresh = 0.9)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$Superplasticizer)
hist(log10(training$Superplasticizer+1))
hist(log10(training$Superplasticizer))
log10(training$Superplasticizer)
?createDataPartition
library(devtools)
library(devtools)
install.packages(c("car", "ggplot2", "Hmisc", "plotly"))
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
library(slidify)
library('googleVis')
install.packages('googleVis')
library('googleVis')
library(rCharts)
install.packages("rmarkdown")
setwd("~/R tests/ddp/cproj/")
library(shiny)
runApp()
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='papa-vova', token='36CE5BAA19C1AC07AE7FF3E77D33F075', secret='0T/VWz6KhTXFw0T81ARn1oRXwD4z7V2oz9Rs1Ggk')
runApp()
getwd()
